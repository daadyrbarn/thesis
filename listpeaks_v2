sound = selected ("Sound")
# Create objects:
pitch = To Pitch: 0.0, 100, 500
selectObject: sound
intensity = To Intensity: 100, 0
iPeaks = To IntensityTier (peaks)
Rename: "peaks"
selectObject: intensity
iValleys = To IntensityTier (valleys)
Rename: "valleys"
pitchList = Create Strings as tokens: "", " ,"

# Load file with arrow symbols:
symbols = Read Strings from raw text file: "symbols.txt"

# Create variables:
selectObject: sound
duration$ = Get total duration
startT$ = Get start time
endT$ = Get end time

selectObject: pitch
minPitch = Get minimum: 0, 0, "Hertz", "Parabolic"
minPitch$ = Get minimum: 0, 0, "Hertz", "Parabolic"
maxPitch = Get maximum: 0, 0, "Hertz", "Parabolic"
maxPitch$ = Get maximum: 0, 0, "Hertz", "Parabolic"
meanPitch = Get mean: 0, 0, "Hertz"
meanPitch$ = Get mean: 0, 0, "Hertz"
form Even intonation field
  comment Specify percentage of allowed variation for even intonation
  positive Allowed_variation_(%) 20
endform
pitchVar = (maxPitch-minPitch)*allowed_variation/100

selectObject: intensity
minIntensity$ = Get minimum: 0, 0, "Parabolic"
maxIntensity$ = Get maximum: 0, 0, "Parabolic"
meanIntensity$ = Get mean: 0, 0, "energy"

selectObject: iPeaks
numPeaks = Get number of points
numPeaks$ = Get number of points
emptyPeaks = 0


# Write baseline info:
clearinfo
appendInfoLine: "Total duration: ", duration$
appendInfoLine: "Start: ", startT$
appendInfoLine: "End: ", endT$
appendInfoLine: ""
appendInfoLine: "Pitch info:"
appendInfoLine: "  Min pitch: ", minPitch$
appendInfoLine: "  Max pitch: ", maxPitch$
appendInfoLine: "  Mean pitch: ", meanPitch$
appendInfoLine: "  pitchVar: ", pitchVar
appendInfoLine: ""
appendInfoLine: "Intensity info:"
appendInfoLine: "  Min intensity: ", minIntensity$
appendInfoLine: "  Max intensity: ", maxIntensity$
appendInfoLine: "  Mean intensity: ", meanIntensity$
appendInfoLine: ""


# Get time, intensity, and pitch at all intensity peaks:
appendInfoLine: "Pitch at intensity peaks:"
appendInfoLine: "  Number of peaks: ", numPeaks$
appendInfoLine: ""

for i to numPeaks
  selectObject: iPeaks
  t = Get time from index: i
  t$ = Get time from index: i
  appendInfoLine: "Peak ", i, ":  ", t$

  int = Get value at time: t
  int$ = Get value at time: t
  appendInfoLine: "  Intensity: ", int$

  selectObject: pitch
  pit = Get value at time: t, "Hertz", "Linear"
  pit$ = Get value at time: t, "Hertz", "Linear"
  appendInfoLine: "  Pitch: ", pit$
  appendInfoLine: ""
  if pit$ = "--undefined-- Hz"
    emptyPeaks = emptyPeaks+1
  else
    emptyPeaks = emptyPeaks+0
  endif

## This will make a list of the pitch values that are not undefined.
#  It will however only list them as strings, and therefore they can't
#  be used in calculations.
#  if pit$ = "--undefined-- Hz"
#    emptyPeaks = emptyPeaks+1
#  else
#    selectObject: pitchList
#    #listLength = Get number of strings
#    #Insert string: listLength+1, pit
#    pString$ = pit$ - " Hz"
#    Insert string: 0, pString$
#  endif

## This is used to relate the mean pitch to the individual pitch levels.
  selectObject: pitch
  pitchDiff = pit-meanPitch
  pitchDiffAbs = abs(pitchDiff)

## This version will only add an arrow if the last point has a pitch.
## Goal is to add arrow to the last point with defined pitch.
#  if pit$ = "--undefined-- Hz"
#    appendInfoLine: "  Pitch: No pitch found at this point."
#  else
#    if i = numPeaks
#      selectObject: symbols
#      if pitchDiffAbs > pitchVar
#        if pitchDiff > 0
#          arrow$ = Get string: 3
#          appendInfoLine: "  Pitch: ", pit$, "  ", arrow$
#        else
#          arrow$ = Get string: 2
#          appendInfoLine: "  Pitch ", pit$, "  ", arrow$
#        endif
#      else
#        arrow$ = Get string: 1
#        appendInfoLine: "  Pitch: ", pit$, "  ", arrow$
#      endif
#    else
#      appendInfoLine: "  Pitch: ", pit$
#    endif
#  endif
endfor

appendInfoLine: "Peaks with no pitch: ", emptyPeaks
appendInfoLine: ""



### Make a repeat loop that will check if pitch is defined.
#   Start at last peak; if no pitch is found, increment down by one and repeat.
#   When pitch is found, print info and terminate loop.

x = numPeaks
repeat
  selectObject: iPeaks
  t = Get time from index: x
  selectObject: pitch
  pit = Get value at time: t, "Hertz", "Linear"
  pit$ = Get value at time: t, "Hertz", "Linear"

  # The pitchDiff has to be redefined here, since the other instance is inside
  # its own loop, and would otherwise always be based off the last iPeak.
  pitchDiff = pit-meanPitch
  pitchDiffAbs = abs(pitchDiff)

  if pit$ = "--undefined-- Hz"
    x = x-1
  else
    selectObject: symbols
    if pitchDiffAbs > pitchVar
      if pitchDiff > 0
        arrow$ = Get string: 3
        appendInfoLine: "Pitch at end compared to mean:"
        appendInfoLine: "iPeak number: ", x, " of ", numPeaks, ",  Mean pitch: ", meanPitch$
        appendInfoLine: "Pitch: ", pit$, ", Intonation: ", arrow$
      else
        arrow$ = Get string: 2
        appendInfoLine: "Pitch at end compared to mean:"
        appendInfoLine: "iPeak number: ", x, " of ", numPeaks, ",  Mean pitch: ", meanPitch$
        appendInfoLine: "Pitch: ", pit$, ", Intonation: ", arrow$
      endif
    else
      arrow$ = Get string: 1
      appendInfoLine: "Pitch at end compared to mean:  "
      appendInfoLine: "iPeak number: ", x, " of ", numPeaks, ",  Mean pitch: ", meanPitch$
      appendInfoLine: "Pitch: ", pit$, ", Intonation: ", arrow$
    endif
    x = 1
  endif
until x = 1
